parameters:
- name: Application
  type: string
- name: Platform
  type: object
  default:
    Runtime: linux-x64
    Architecture: amd64

steps:
- task: DotNetCoreCLI@2
  displayName: 'Publish ${{ parameters.Application }} on ${{ parameters.Platform.Runtime }}'
  inputs:
    command: publish
    arguments: '--configuration Release --runtime ${{ parameters.Platform.Runtime }} --no-self-contained --output $(Solution.ApplicationLocation)/${{ parameters.Application }}/publish_output/opt/${{ parameters.Application }}'
    projects: '$(Solution.ApplicationLocation)/${{ parameters.Application }}/*.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: false

- pwsh: New-Item -Type Directory -Force $(Build.ArtifactStagingDirectory)/${{ parameters.Application }}/${{ parameters.Platform.Architecture }}
  displayName: MkDir ${{ parameters.Application }}/${{ parameters.Platform.Architecture }} Artifact Directory

- task: Bash@3
  displayName: "Package ${{ parameters.Application }}/${{ parameters.Platform.Architecture }} as DEB"
  inputs:
    filePath: "$(Solution.ApplicationLocation)/${{ parameters.Application }}/deb/dpkg-deb.sh"
    workingDirectory: $(Solution.ApplicationLocation)/${{ parameters.Application }}
    arguments: $(Build.ArtifactStagingDirectory)/${{ parameters.Application }}/${{ parameters.Platform.Architecture }} ${{ lower(parameters.Application) }} $(Solution.Version) ${{ parameters.Platform.Architecture }}

- task: PublishBuildArtifacts@1
  displayName: "Artifacts ${{ parameters.Application }}/${{ parameters.Platform.Architecture }} to Build Container"
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/${{ parameters.Application }}/${{ parameters.Platform.Architecture }}
    artifactName: '${{ parameters.Application }}-${{ parameters.Platform.Architecture }}'
